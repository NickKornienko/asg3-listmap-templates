head	1.40;
access;
symbols;
locks;
comment	@.\" @;


1.40
date	2022.02.08.06.07.37;	author -;	state -;
branches;
next	1.39;

1.39
date	2022.02.08.06.07.23;	author -;	state -;
branches;
next	1.38;

1.38
date	2022.02.08.06.06.57;	author -;	state -;
branches;
next	1.37;

1.37
date	2022.02.05.04.09.39;	author -;	state -;
branches;
next	1.36;

1.36
date	2022.02.05.03.51.53;	author -;	state -;
branches;
next	1.35;

1.35
date	2022.02.05.03.51.20;	author -;	state -;
branches;
next	1.34;

1.34
date	2022.02.05.03.50.59;	author -;	state -;
branches;
next	1.33;

1.33
date	2022.02.05.03.50.40;	author -;	state -;
branches;
next	1.32;

1.32
date	2022.02.05.03.49.41;	author -;	state -;
branches;
next	1.31;

1.31
date	2022.02.05.03.46.29;	author -;	state -;
branches;
next	1.30;

1.30
date	2022.02.05.03.45.40;	author -;	state -;
branches;
next	1.29;

1.29
date	2022.02.05.03.45.13;	author -;	state -;
branches;
next	1.28;

1.28
date	2022.02.05.03.40.55;	author -;	state -;
branches;
next	1.27;

1.27
date	2022.02.03.00.58.01;	author -;	state -;
branches;
next	1.26;

1.26
date	2022.02.03.00.56.51;	author -;	state -;
branches;
next	1.25;

1.25
date	2022.02.03.00.56.29;	author -;	state -;
branches;
next	1.24;

1.24
date	2022.02.03.00.51.40;	author -;	state -;
branches;
next	1.23;

1.23
date	2022.02.03.00.51.11;	author -;	state -;
branches;
next	1.22;

1.22
date	2022.02.03.00.50.46;	author -;	state -;
branches;
next	1.21;

1.21
date	2022.02.03.00.50.21;	author -;	state -;
branches;
next	1.20;

1.20
date	2022.02.03.00.49.38;	author -;	state -;
branches;
next	1.19;

1.19
date	2022.02.03.00.49.18;	author -;	state -;
branches;
next	1.18;

1.18
date	2022.02.03.00.44.21;	author -;	state -;
branches;
next	1.17;

1.17
date	2022.02.02.21.54.37;	author -;	state -;
branches;
next	1.16;

1.16
date	2022.02.02.21.48.59;	author -;	state -;
branches;
next	1.15;

1.15
date	2022.02.02.21.34.20;	author -;	state -;
branches;
next	1.14;

1.14
date	2022.02.02.21.33.59;	author -;	state -;
branches;
next	1.13;

1.13
date	2022.02.02.21.33.29;	author -;	state -;
branches;
next	1.12;

1.12
date	2022.02.02.21.32.24;	author -;	state -;
branches;
next	1.11;

1.11
date	2022.02.02.21.32.09;	author -;	state -;
branches;
next	1.10;

1.10
date	2022.02.02.21.30.36;	author -;	state -;
branches;
next	1.9;

1.9
date	2022.02.02.21.28.49;	author -;	state -;
branches;
next	1.8;

1.8
date	2022.02.02.21.27.35;	author -;	state -;
branches;
next	1.7;

1.7
date	2022.02.02.21.26.28;	author -;	state -;
branches;
next	1.6;

1.6
date	2022.02.02.21.22.07;	author -;	state -;
branches;
next	1.5;

1.5
date	2022.02.02.21.19.35;	author -;	state -;
branches;
next	1.4;

1.4
date	2022.02.02.21.19.05;	author -;	state -;
branches;
next	1.3;

1.3
date	2022.02.02.21.03.33;	author -;	state -;
branches;
next	1.2;

1.2
date	2022.02.02.20.42.47;	author -;	state -;
branches;
next	1.1;

1.1
date	2022.02.02.20.39.35;	author -;	state -;
branches;
next	;


desc
@@


1.40
log
@-
@
text
@.so Tmac.mm-etc
.if t .Newcentury-fonts
.INITR* \n[.F]
.SIZE 12 14
.de BULLETS
.   ALX \[bu] 0 "" 0 0
..
.TITLE "Regular expression matchng"
.RCS \
"$Id: regex-match.mm,v 1.39 2022-02-07 22:07:23-08 - - $"
.PWD
.URL
.H 1 "Regular expressions"
Regular expressions are a powerful way of scanning lines of
text and selecting parts thereof based on pattern specifictions.
.P
In C++, the facility is made available via
.V= <regex> .
.P
.V= https://www.cplusplus.com/reference/regex/
.P
.H 1 "https://regexr.com/"
.V= https://regexr.com/ 
has an interactive page to learn about regular expressions.
.H 1 "Raw strings"
Raw strings are a way of writing string constants without the
need to escape escapes.  For example, the string
.V= \[Dq]\[rs]\[rs]\[rs]\[Dq]\[rs]t\[rs]n\[Dq]
represents a backslash, a quote, a tab, and a newline.
.P
But regexes are represented as strings,
and use backslashes for a separate semantic reason.
To avoid having to double every backslash, a
raw string can be used.
This is denoted by placing the letter
.V= R
in front of the quoted string,
and using parentheses inside the string.
.P
So, for example
.V= R\[Dq](\[rs]\[Dq]\[rs]t)\[Dq]
represents the actual string of 4 characters that appears
between the parentheses \[em]
a backslash, a quote, a backslash, and the letter ``t''.
.H 1 "Regex classes in C++"
Consider the example program
.V= matchlines.cpp .
It has the following three declarations\(::
.DS
.VTCODE* 1 "regex comment_regex " "" \
"{R\[Dq](\[ha]\[rs]s*(#.*)?\[Do])\[Dq]};"
.VTCODE* 1 "regex key_value_regex " "" \
"{R\[Dq](\[ha]\[rs]s*(.*?)\[rs]s*=\[rs]s*(.*?)\[rs]s*\[Do])\[Dq]};"
.VTCODE* 1 "regex trimmed_regex " "" \
"{R\[Dq](\[ha]\[rs]s*([\[ha]=]+?)\[rs]s*\[Do])\[Dq]};"
.DE
.V= regex
is the data type initialized with the raw strings.
Pattern matching applies a regular expression to a string and
determines a match.
Regexes are a programming language in themselves.
.P
.ne 20
Dissection of the strings.
In the following each item shows only the actual regex after the
raw string delimiters have been stripped.
.ALX a ()
.LI
.V= "\[ha]\[rs]s*(#.*)?\[Do]"
.br
Match optional white space, optionally followed by a hash
and anything that follows it.
.VL \n[Pi]
.V=LI "\[ha]"
Match the beginning of the string.
.V=LI "\[rs]s*"
Match zero or more white space characters.
Backslash escapes meta characters and makes ordinary characters
have special meanings.
.V= \[rs]s
match white space (spaces, tabs, newlines).
The asterisk indicates that the preceding item should be
recognized zero ore more times.
.V=LI "("
Begin a capture.
In a 
.V= regex_search ,
this will be an element of the result vector.
.V=LI "#.*"
Match the hash (literally), followed by zero or more of anything.
A dot
.=V ( \&. )
matches any characters except a newline, and
.=V ( \&.* )
matches zero or more of any character.
.V=LI ")?"
End the capture and place it into the result.
The question mark indicates that the preceding capture is optional.
.V=LI "\[Do]"
Match the end of the string.
.LE
.LI
.V= "\[ha]\[rs]s*(.*?)\[rs]s*=\[rs]s*(.*?)\[rs]s*\[Do]"
.br
Match any sequence of characters preceding an equal sign
.=V ( = )
and then also after the equal sign,
capturing sequences befoe and after it.
In each sequence white space is trimmed fore and aft.
.VL \n[Pi]
.V=LI "\[ha]"
Beginning of line.
.V=LI "\[rs]s*"
Zero or more white space.
.V=LI "(.*?)"
Match and capture any sequence of zero or more characters.
Non-greedy (lazy) matching, as few as possible.
.V=LI "\&.*"
would mean a greedy match, but
.V=LI "\&.*?"
is a lazy match, which matches as few characters as possible.
.V=LI "\[rs]s*"
Zero or more white space.
.V=LI "="
Match an equal sign.
.V=LI "\[rs]s*"
Zero or more white space.
.V=LI "(.*?)"
As above, the second captured match.
Parentheses indicate a capture.
Non-greedy matching of zero or more characters.
.V=LI "\[rs]s*"
Zero or more white space.
.V=LI "\[Do]"
End of line.
.LE
.br
.ne 20
.LI
.V= \[ha]\[rs]s*([\[ha]=]+?)\[rs]s*\[Do]
.br
Match a line containing a sequence of one or more characters
none of which is an equal sign.
.VL \n[Pi]
.V=LI "\[ha]"
Beginnng of line.
.V=LI "\[rs]s*"
White space.
.V=LI "([\[ha]=]+?)"
Capture what is in the parentheses.
Brackets indicate a set of characters, in this case the
character equal sign.
The circumflex (hat) complements the set.
So 
.V=LI [\[ha]=]
matches any character not an equal sign.
.V=LI [\[ha]=]+
matches one or more such characters.
.V=LI [\[ha]=]+?
matches one or more such characters, but in a non-greedy (lazy)
manner, matching as few as possible.
.V=LI "\[rs]s*"
White space.
.V=LI "\[Do]"
End of line.
.LE
.LE
.H 1 "Usage of regex"
The 
.V= regex
variables declared above are used in the example program
.V= matchlines.cpp .
Part of the code follows.
.ALX a ()
.LI
.V= "string line;"
.br
.V= "smatch result;"
.br
An
.V= smatch
variable holds the result of a regex match,
and is used to store the results of a search.
Each pair of parentheses in the regex will capture a matched result.
.BULLETS
.LI
.V= result[0]
represents the entire matched expression
.LI
.V= result[i]
represents sub-expression
.V= i
that has been matched.
.LE
.LI
.V= "if (regex_search (line, result, comment_regex)) {"
.br
Search the line to see if it matches the comment regex.
If so, we can ignore the line because comments are not data.
.V= regex_search
returns true if the match has succeeded.
.LI
.V= "}else if (regex_search (line, result, key_value_regex)) {"
.br
Search the line for a key value pair.
This regex has two captures.
If the match succeeds, the
.V= "smatch result"
variable has two values in it.
At this point\(::
.BULLETS
.LI
.V= result[1]
has the key (first captured string)
.LI
.V= result[2]
has the value (second captured string)
.LE
.LI
.V= "}else if (regex_search (line, result, trimmed_regex)) {"
.br
Search the line for the trimmed regex (the third alternative).
This is the query for the program.
.BULLETS
.LI
.V= result[1]
has the value of the query string that was captured.
.LE
.LI
.V= "}else { assert(false)" \0\|.\|.\|.
.br
This can't happen if the three regexes are exhaustive.
But an
.V= assert(false)
just does a backup check to make sure the program crashes
if the logic is wrong.
.bp
.H 1 "Complete code for \f[CB]misc/matchlines.cpp\fP example"
.DS
.ft CB
#include <cassert>
#include <iostream>
#include <regex>
#include <string>
using namespace std;

int main() {
   regex comment_regex {R"(^\[rs]s*(#.*)?$)"};
   regex key_value_regex {R"(^\[rs]s*(.*?)\[rs]s*=\[rs]s*(.*?)\[rs]s*$)"};
   regex trimmed_regex {R"(^\[rs]s*([^=]+?)\[rs]s*$)"};
   for (;;) {
      string line;
      getline (cin, line);
      if (cin.eof()) break;
      cout << "input: \[rs]"" << line << "\[rs]"" << endl;
      smatch result;
      if (regex_search (line, result, comment_regex)) {
         cout << "Comment or empty line." << endl;
      }else if (regex_search (line, result, key_value_regex)) {
         cout << "key  : \[rs]"" << result[1] << "\[rs]"" << endl;
         cout << "value: \[rs]"" << result[2] << "\[rs]"" << endl;
      }else if (regex_search (line, result, trimmed_regex)) {
         cout << "query: \[rs]"" << result[1] << "\[rs]"" << endl;
      }else {
         assert (false and "This can not happen.");
      }
   }
   return 0;
}
.DE
@


1.39
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.38 2022-02-07 22:06:57-08 - - $"
d23 1
a23 1
.V= https://regexr.com/ ,
@


1.38
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.37 2022-02-04 20:09:39-08 - - $"
d22 1
a22 1
Also see the site 
d24 1
a24 1
which has an interactive page to learn about regular expressions.
@


1.37
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.36 2022-02-04 19:51:53-08 - - $"
d21 4
@


1.36
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.35 2022-02-04 19:51:20-08 - - $"
a12 3
.H 1 "\f[CB]https://regexr.com/\fP"
You may perhaps find the following URL useful\(::
.V= https://regexr.com/
@


1.35
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.34 2022-02-04 19:50:59-08 - - $"
d237 1
a237 1
.H 1 "Complete code for \f[CB]matchlines.cpp\fP example"
@


1.34
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.33 2022-02-04 19:50:40-08 - - $"
d269 1
@


1.33
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.32 2022-02-04 19:49:41-08 - - $"
d237 1
a237 1
.H 1 "Complete code for \f[CB]matchlines.cpp\P example"
@


1.32
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.31 2022-02-04 19:46:29-08 - - $"
a12 3
.EQ
delim $$
.EN
@


1.31
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.30 2022-02-04 19:45:40-08 - - $"
d239 33
@


1.30
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.29 2022-02-04 19:45:13-08 - - $"
d59 2
a60 1
.V= regex is the data type initialized with the raw strings.
@


1.29
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.28 2022-02-04 19:40:55-08 - - $"
d16 1
a16 1
.H 1 "https://regexr.com/"
@


1.28
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.27 2022-02-02 16:58:01-08 - - $"
d16 3
a237 3
.H 1 "https://regexr.com/"
You may perhaps find the following URL useful\(::
.V= https://regexr.com/
@


1.27
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.26 2022-02-02 16:56:51-08 - - $"
d235 3
@


1.26
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.25 2022-02-02 16:56:29-08 - - $"
d189 3
a191 6
represents the subexpressions that have been matched.
It is required that 
.V= "0 < i <= n" ,
where
.V= n
is the number of captured subexpressions.
@


1.25
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.24 2022-02-02 16:51:40-08 - - $"
d187 1
@


1.24
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.23 2022-02-02 16:51:11-08 - - $"
d182 13
@


1.23
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.22 2022-02-02 16:50:46-08 - - $"
d217 1
a217 1
.V= "}else { assert" \0\|.\|.\|.
@


1.22
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.21 2022-02-02 16:50:21-08 - - $"
d218 1
@


1.21
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.20 2022-02-02 16:49:38-08 - - $"
d201 1
a201 1
has the key (first captured string), and
d204 1
a204 1
has the value (second captured string).
@


1.20
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.19 2022-02-02 16:49:18-08 - - $"
d197 3
a199 1
At this point,
d202 1
d205 1
d211 2
d215 1
@


1.19
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.18 2022-02-02 16:44:21-08 - - $"
d202 2
a203 1
.LI "}else if (regex_search (line, result, trimmed_regex)) {"
@


1.18
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.17 2022-02-02 13:54:37-08 - - $"
d197 18
a214 11



         cout << "key  : \"" << result[1] << "\"" << endl;
         cout << "value: \"" << result[2] << "\"" << endl;
      }else if (regex_search (line, result, trimmed_regex)) {
         cout << "query: \"" << result[1] << "\"" << endl;




@


1.17
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.16 2022-02-02 13:48:59-08 - - $"
d172 1
a172 1
.ALX a
d183 1
a183 1
.V= "if (regex_search (line, result, comment_regex))"
d187 2
d190 8
a199 2
         cout << "Comment or empty line." << endl;
      }else if (regex_search (line, result, key_value_regex)) {
@


1.16
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.15 2022-02-02 13:34:20-08 - - $"
d166 34
@


1.15
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.14 2022-02-02 13:33:59-08 - - $"
d115 1
d129 1
d138 1
a138 1
.V= \[ha]\[rs]s*([\[ha]=]+?)\[rs]s*\[Do]"
@


1.14
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.13 2022-02-02 13:33:29-08 - - $"
d133 2
@


1.13
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.12 2022-02-02 13:32:24-08 - - $"
d133 1
@


1.12
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.11 2022-02-02 13:32:09-08 - - $"
d61 1
@


1.11
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.10 2022-02-02 13:30:36-08 - - $"
d138 1
a138 1
--- Beginnng of line.
d140 1
a140 1
--- White space.
d142 1
a142 1
--- Capture what is in the parentheses.
d155 1
a155 1
--- White space.
d157 1
a157 1
--- End of line.
@


1.10
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.9 2022-02-02 13:28:49-08 - - $"
d121 1
a131 1
.LI
d136 2
a137 3
.BULLETS
.LI
.V= "\[ha]"
d139 1
a139 2
.LI
.V= "\[rs]s*"
d141 1
a141 2
.LI
.V= "([\[ha]=]+?)"
d147 1
a147 1
.V= [\[ha]=]
d149 1
a149 1
.V= [\[ha]=]+
d151 1
a151 1
.V= [\[ha]=]+?
d154 1
a154 2
.LI
.V= "\[rs]s*"
d156 1
a156 2
.LI
.V= "\[Do]"
@


1.9
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.8 2022-02-02 13:27:35-08 - - $"
d107 8
a114 11
.BULLETS
.LI
.V= "\[ha]"
--- Beginning of line.
.LI
.V= "\[rs]s*"
--- Zero or more white space.
.LI
.V= "(.*?)"
--- Match and capture any sequence of zero or more characters.
.V= "\&.*"
d116 1
a116 1
.V= "\&.*?"
d118 7
a124 11
.LI
.V= "\[rs]s*"
--- Zero or more white space.
.LI
.V= "="
.LI
.V= "\[rs]s*"
--- Zero or more white space.
.LI
.V= "(.*?)"
--- As above, the second captured match.
d126 4
a129 6
.LI
.V= "\[rs]s*"
--- Zero or more white space.
.LI
.V= "\[Do]"
--- End of line.
@


1.8
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.7 2022-02-02 13:26:28-08 - - $"
d67 1
d100 3
a102 2
.V=LI "\[ha]\[rs]s*(.*?)\[rs]s*=\[rs]s*(.*?)\[rs]s*\[Do]"
--- Match any sequence of characters preceding an equal sign
d142 2
a143 1
--- Match a line containing a sequence of one or more characters
@


1.7
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.6 2022-02-02 13:22:07-08 - - $"
d65 1
d67 1
a67 1
--- Match optional white space, optionally followed by a hash
d71 1
a71 1
--- Match the beginning of the string.
d73 1
a73 1
--- Match zero or more white space characters.
d81 1
a81 1
--- Begin a capture.
d86 1
a86 1
--- Match the hash (literally), followed by zero or more of anything.
d93 1
a93 1
--- End the capture and place it into the result.
d96 1
a96 1
--- Match the end of the string.
@


1.6
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.5 2022-02-02 13:19:35-08 - - $"
a64 1
.LI
d68 2
a69 3
.BULLETS
.LI
.V= "\[ha]"
d71 1
a71 2
.LI
.V= "\[rs]s*"
d79 1
a79 2
.LI
.V= "("
d84 1
a84 2
.LI
.V= "#.*"
d91 1
a91 2
.LI
.V= ")?"
d94 1
a94 2
.LI
.V= "\[Do]"
d98 1
a98 1
.V= "\[ha]\[rs]s*(.*?)\[rs]s*=\[rs]s*(.*?)\[rs]s*\[Do]"
@


1.5
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.4 2022-02-02 13:19:05-08 - - $"
d158 11
@


1.4
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.3 2022-02-02 13:03:33-08 - - $"
d149 1
d152 1
d155 1
d158 1
d161 1
@


1.3
log
@-
@
text
@d10 1
a10 1
"$Id: regex-match.mm,v 1.2 2022-02-02 12:42:47-08 - - $"
d106 5
a110 1
--- This time we only describe what was not described above.
d114 1
d117 1
d120 5
d127 1
d132 1
d135 2
d139 1
d142 1
d146 2
d149 10
@


1.2
log
@-
@
text
@d5 3
d10 1
a10 1
"$Id: regex-match.mm,v 1.1 2022-02-02 12:39:35-08 - - $"
d38 1
d42 90
a131 1
between the parentheses.
@


1.1
log
@-
@
text
@d7 1
a7 1
"$Id: regex-match.mm,v 1.1 2022-02-02 12:37:31-08 - - $"
d26 1
d33 6
a38 1
in front of the quoted string.
@
